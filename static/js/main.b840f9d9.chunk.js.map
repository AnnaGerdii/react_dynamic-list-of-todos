{"version":3,"sources":["User.js","TodoItem.js","TodoList.js","App.js","api.js","index.js"],"names":["User","_ref","name","email","react_default","a","createElement","Fragment","className","TodoItem","_ref$todoItem","todoItem","user","id","title","completed","src_User","TodoList","todoList","handleClick","map","headItem","key","type","onClick","todo","src_TodoItem","App","_useState","useState","_useState2","Object","slicedToArray","todos","saveTodos","_useState3","_useState4","isLoading","setLoading","_useState5","_useState6","sortField","setSortField","_useState7","_useState8","loadingError","setLoadingError","length","src_TodoList","field","newTodos","toConsumableArray","sort","todoA","todoB","comparator1","comparator2","String","localeCompare","reverse","_ref2","usersFromServer","todosFromServer","regenerator_default","async","_context","prev","next","awrap","Promise","all","fetch","then","responses","response","json","sent","objectSpread2","find","userId","t0","stop","disabled","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.b840f9d9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ name, email }) => (\n  <>\n    <td className=\"table__cell\">{name}</td>\n    <td className=\"table__cell\">{email}</td>\n  </>\n);\n\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n};\n\nexport default User;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport User from './User';\n\nconst TodoItem = ({ todoItem: { user, id, title, completed } }) => (\n  <tr className=\"table__row\">\n    <td className=\"table__cell\">{id}</td>\n    <td className=\"table__cell\">{title}</td>\n    <User name={user.name} email={user.email} />\n    <td className=\"table__cell\">{completed ? 'completed' : 'not completed'}</td>\n  </tr>\n);\n\nTodoItem.propTypes = {\n  todoItem: PropTypes.shape({\n    user: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n    }).isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n\nexport default TodoItem;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todoList, handleClick }) => {\n  const head = ['id', 'title', 'name', 'email', 'completed'];\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          {head.map(headItem => (\n            <th\n              key={headItem}\n              className=\"table__head-cell\"\n            >\n              <button\n                className=\"button button_head\"\n                type=\"button\"\n                onClick={() => handleClick(headItem)}\n              >\n                {headItem === 'completed' ? 'status' : headItem}\n              </button>\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {todoList.map(todo => (\n          <TodoItem todoItem={todo} key={todo.id} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTodoList.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport { getTodosAndUsers } from './api';\nimport TodoList from './TodoList';\n\nconst App = () => {\n  const [todos, saveTodos] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [sortField, setSortField] = useState('id');\n  const [loadingError, setLoadingError] = useState(false);\n\n  const loadTodos = async() => {\n    setLoading(true);\n\n    try {\n      const [usersFromServer, todosFromServer] = await getTodosAndUsers();\n      const newTodos = todosFromServer.map(todo => ({\n        ...todo,\n        user: usersFromServer.find(user => user.id === todo.userId),\n      }));\n\n      saveTodos(newTodos);\n    } catch {\n      setLoading(false);\n      setLoadingError(true);\n    }\n  };\n\n  const sortHandler = (field) => {\n    if (sortField === field) {\n      saveTodos([...todos].reverse());\n\n      return;\n    }\n\n    const newTodos = [...todos]\n      .sort((todoA, todoB) => {\n        const comparator1 = todoA[field] || todoA.user[field];\n        const comparator2 = todoB[field] || todoB.user[field];\n\n        return typeof comparator1 === 'number'\n          ? comparator1 - comparator2\n          : String(comparator1).localeCompare(String(comparator2));\n      });\n\n    saveTodos(newTodos);\n\n    setSortField(field);\n  };\n\n  if (loadingError) {\n    return <p className=\"error-message\">Oops, something went wrong!</p>;\n  }\n\n  return (\n    <div className=\"App\">\n      {!todos.length ? (\n        <>\n          <button\n            className=\"button button_load\"\n            type=\"button\"\n            onClick={loadTodos}\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        </>\n      )\n        : (\n          <>\n            <h1 className=\"table__heading\">Dynamic list of todos</h1>\n            <TodoList todoList={todos} handleClick={sortHandler} />\n          </>\n        )\n      }\n    </div>\n  );\n};\n\nexport default App;\n","const URL_USERS = 'https://jsonplaceholder.typicode.com/users';\nconst URL_TODOS = 'https://jsonplaceholder.typicode.com/todos';\n\nexport const getTodosAndUsers = () => (\n  Promise.all([fetch(URL_USERS), fetch(URL_TODOS)])\n    .then(responses => (Promise.all(responses.map(response => response.json()))\n    ))\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}